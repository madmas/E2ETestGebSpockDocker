buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
    }

    dependencies {
        classpath 'io.ratpack:ratpack-gradle:1.5.0'
        classpath "com.github.jengelman.gradle.plugins:shadow:5.1.0"
    }
}

plugins {
    id "com.moowork.grunt" version "1.2.0"
    id "com.moowork.node" version "1.2.0"
    id "com.energizedwork.webdriver-binaries" version "1.4"
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'application'
apply plugin: 'io.ratpack.ratpack-groovy'
apply plugin: 'com.github.johnrengelman.shadow'

repositories {
    jcenter()
}

ext {
    // The drivers we want to use
    drivers = ["firefox"]

    ext {
        groovyVersion = '2.4.5'
        gebVersion = '3.0.1'
        seleniumVersion = '4.0.0-alpha-2'
        chromeDriverVersion = '2.33'
        geckoDriverVersion = '0.24.0'
    }
}

dependencies {
    // If using Spock, need to depend on geb-spock
    testCompile "org.gebish:geb-spock:$gebVersion"
    testCompile("org.spockframework:spock-core:1.1-groovy-2.4") {
        exclude group: "org.codehaus.groovy"
    }
    testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"

    testCompile "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"

    testCompile 'junit:junit:4.12'
    runtime "org.slf4j:slf4j-simple:1.7.21"
}

webdriverBinaries {
    chromedriver chromeDriverVersion
    geckodriver geckoDriverVersion
}

clean.doFirst {
    delete "${project.buildDir}"
    delete "${projectDir}/node_modules"
    delete "${projectDir}/src/main/js/node_modules"
    delete "${projectDir}/src/main/js/.tmp"
    delete "${projectDir}/src/main/js/dist"
    delete "${projectDir}/src/main/js/.sass-cache"
    delete "${projectDir}/src/main/js/package-lock.json"
}


task sourcesJar(type: Jar) {
    group 'Build'
    description 'An archive of the source code'
    classifier 'sources'
    from sourceSets.main.allSource
}

jar.finalizedBy sourcesJar

artifacts {
    sourcesJar
}

/**** web app build ****/

def jsWorkingDir = "${projectDir}/src/main/js"

node {
    // Version of node to use.
    version = '10.16.3'
    // Base URL for fetching node distributions (change if you have a mirror).
    distBaseUrl = 'http://nodejs.org/dist'
    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true
    // Set the work directory for unpacking node
    workDir = file("${projectDir}/nodejs")
    // Set the work directory where node_modules should be located
    nodeModulesDir = file(jsWorkingDir)
}

grunt {
    workDir = file(jsWorkingDir)
}

npmInstall {
    execOverrides {
        it.workingDir = file(jsWorkingDir)
    }
}

npm_install {
    inputs.files file('package.json')
    outputs.files file('node_modules')
    args = ['--loglevel', 'warn']
    description = "Install Node.js packages"
    outputs.upToDateWhen { false }
}

task buildNgProd(type: NpmTask, dependsOn: 'npmInstall') {
    args = ['run', 'build-prod']
}
//*************************

task copyClient(type: Copy) {
    from 'src/main/js/dist'
    into 'src/ratpack/public'
    outputs.upToDateWhen { false }
}

copyClient.doFirst {
    delete "${projectDir}/src/ratpack/public"
}

buildNgProd.finalizedBy(copyClient)

/** end webapp build **/

build.dependsOn(buildNgProd)

run.dependsOn(buildNgProd)

/* E2E test with Geb:  gw firefoxTest */
drivers.each { driver ->
    task "${driver}Test"(type: Test) {
        reports {
            html.destination = reporting.file("$name/tests")
            junitXml.destination = file("$buildDir/test-results/$name")
        }

        outputs.upToDateWhen { false }  // Always run tests

        systemProperty "geb.build.reportsDir", reporting.file("$name/geb")
        systemProperty "geb.env", driver

        // If you wanted to set the baseUrl in your buildâ€¦
        // systemProperty "geb.build.baseUrl", "http://myapp.com"

        if(project.hasProperty("applicationAddress")){
            println "Base url: ${project.applicationAddress}"
            systemProperty "geb.build.baseUrl", project.applicationAddress
        }

        if (project.hasProperty("seleniumAddress") && project.seleniumAddress != "") {
            systemProperty "geb.env", "remote${driver.toLowerCase().tokenize().collect { it.capitalize() }.join(" ")}Runner"
            systemProperty "e2e-test.remoteWebDriverUrl", project.seleniumAddress
            println "Selenium address set: ${project.seleniumAddress}"
        }
    }
}