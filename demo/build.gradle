buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
    }

    dependencies {
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
        classpath 'org.kordamp.gradle:stats-gradle-plugin:0.2.0'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
        classpath 'net.nemerosa:versioning:2.1.0'
        classpath 'io.ratpack:ratpack-gradle:1.5.0'
        classpath "com.github.jengelman.gradle.plugins:shadow:1.2.3"
        classpath 'com.bmuschko:gradle-docker-plugin:3.2.0'
    }
}

plugins {
    id "com.moowork.grunt" version "1.2.0"
    id "com.moowork.node" version "1.2.0"
    id "com.energizedwork.webdriver-binaries" version "1.4"
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'application'
apply plugin: 'io.ratpack.ratpack-groovy'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage


repositories {
    jcenter()
    maven { url 'https://jitpack.io' }
}

ext {
    // The drivers we want to use
    drivers = ["firefox"]

    ext {
        groovyVersion = '2.4.5'
        gebVersion = '2.2'
        seleniumVersion = '3.14.0'
        chromeDriverVersion = '2.33'
        geckoDriverVersion = '0.23.0'
    }
}

dependencies {
    // If using Spock, need to depend on geb-spock
    testCompile "org.gebish:geb-spock:$gebVersion"
    testCompile("org.spockframework:spock-core:1.1-groovy-2.4") {
        exclude group: "org.codehaus.groovy"
    }
    //even though we pushed it into the container, we need one driver implementation for compatibility reasons
    testCompile "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"

    testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"

    compile 'org.testcontainers:testcontainers:1.9.0'
    compile 'org.testcontainers:selenium:1.9.0'

    testCompile 'junit:junit:4.12'
    runtime "org.slf4j:slf4j-simple:1.7.21"
}

webdriverBinaries {
    chromedriver chromeDriverVersion
    geckodriver geckoDriverVersion
}

clean.doFirst {
    delete "${project.buildDir}"
    delete "${projectDir}/node_modules"
    delete "${projectDir}/src/main/js/node_modules"
    delete "${projectDir}/src/main/js/.tmp"
    delete "${projectDir}/src/main/js/dist"
    delete "${projectDir}/src/main/js/.sass-cache"
    delete "${projectDir}/src/main/js/package-lock.json"
}


task sourcesJar(type: Jar) {
    group 'Build'
    description 'An archive of the source code'
    classifier 'sources'
    from sourceSets.main.allSource
}

jar.finalizedBy sourcesJar

artifacts {
    sourcesJar
}

/**** web app build ****/

def jsWorkingDir = "${projectDir}/src/main/js"

node {
    // Version of node to use.
    version = '8.12.0'
    // Base URL for fetching node distributions (change if you have a mirror).
    distBaseUrl = 'http://nodejs.org/dist'
    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true
    // Set the work directory for unpacking node
    workDir = file("${projectDir}/nodejs")
    // Set the work directory where node_modules should be located
    nodeModulesDir = file(jsWorkingDir)
}

grunt {
    workDir = file(jsWorkingDir)
}

npmInstall {
    execOverrides {
        it.workingDir = file(jsWorkingDir)
    }
}

npm_install {
    inputs.files file('package.json')
    outputs.files file('node_modules')
    args = ['--loglevel', 'warn']
    description = "Install Node.js packages"
    outputs.upToDateWhen { false }
}

task phantomInstall(type: NpmTask) {
    args = ['install', '-g', 'phantomjs', '--no-save', '--silentMode']
}

// processes your package.json before running grunt build
yarn_install.dependsOn 'npmInstall'
// yarn_install.dependsOn 'phantomInstall'

// makes sure on each build that grunt is installed
grunt_dist.dependsOn 'installGrunt'

grunt_dist.dependsOn 'yarn_install'
//*************************

task copyClient(type: Copy) {
    from 'src/main/js/dist'
    into 'src/ratpack/public'
    outputs.upToDateWhen { false }
}

task buildImage(type: DockerBuildImage) {
    inputDir =  project.projectDir
    tag = 'madmas/mydemoimage:latest'
}

grunt_dist.finalizedBy(copyClient)

/** end webapp build **/

build.dependsOn(grunt_dist)
buildImage.dependsOn(shadowJar)
build.finalizedBy(buildImage)

test {
    exclude '**/*Spec*'
}

task e2eTests(type: Test){
    include '**/*Spec*'
}